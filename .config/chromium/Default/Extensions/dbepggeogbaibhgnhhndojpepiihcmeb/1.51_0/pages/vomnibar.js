// Generated by CoffeeScript 1.9.1
(function() {
  var BackgroundCompleter, Vomnibar, VomnibarUI, root,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Vomnibar = {
    vomnibarUI: null,
    getUI: function() {
      return this.vomnibarUI;
    },
    completers: {},
    getCompleter: function(name) {
      if (!(name in this.completers)) {
        this.completers[name] = new BackgroundCompleter(name);
      }
      return this.completers[name];
    },
    activate: function(userOptions) {
      var completer, options;
      options = {
        completer: "omni",
        query: "",
        newTab: false,
        selectFirst: false
      };
      extend(options, userOptions);
      options.refreshInterval = (function() {
        switch (options.completer) {
          case "omni":
            return 100;
          default:
            return 0;
        }
      })();
      completer = this.getCompleter(options.completer);
      if (this.vomnibarUI == null) {
        this.vomnibarUI = new VomnibarUI();
      }
      completer.refresh();
      this.vomnibarUI.setInitialSelectionValue(options.selectFirst ? 0 : -1);
      this.vomnibarUI.setCompleter(completer);
      this.vomnibarUI.setRefreshInterval(options.refreshInterval);
      this.vomnibarUI.setForceNewTab(options.newTab);
      this.vomnibarUI.setQuery(options.query);
      return this.vomnibarUI.update();
    },
    hide: function() {
      var ref;
      return (ref = this.vomnibarUI) != null ? ref.hide() : void 0;
    },
    onHidden: function() {
      var ref;
      return (ref = this.vomnibarUI) != null ? ref.onHidden() : void 0;
    }
  };

  VomnibarUI = (function() {
    function VomnibarUI() {
      this.update = bind(this.update, this);
      this.onKeydown = bind(this.onKeydown, this);
      this.refreshInterval = 0;
      this.postHideCallback = null;
      this.initDom();
    }

    VomnibarUI.prototype.setQuery = function(query) {
      return this.input.value = query;
    };

    VomnibarUI.prototype.setInitialSelectionValue = function(initialSelectionValue) {
      return this.initialSelectionValue = initialSelectionValue;
    };

    VomnibarUI.prototype.setCompleter = function(completer) {
      this.completer = completer;
      this.reset();
      return this.update(true);
    };

    VomnibarUI.prototype.setRefreshInterval = function(refreshInterval) {
      return this.refreshInterval = refreshInterval;
    };

    VomnibarUI.prototype.setForceNewTab = function(forceNewTab) {
      return this.forceNewTab = forceNewTab;
    };

    VomnibarUI.prototype.hide = function(postHideCallback) {
      this.postHideCallback = postHideCallback != null ? postHideCallback : null;
      UIComponentServer.postMessage("hide");
      return this.reset();
    };

    VomnibarUI.prototype.onHidden = function() {
      if (typeof this.postHideCallback === "function") {
        this.postHideCallback();
      }
      return this.postHideCallback = null;
    };

    VomnibarUI.prototype.reset = function() {
      this.completionList.style.display = "";
      this.input.value = "";
      this.updateTimer = null;
      this.completions = [];
      return this.selection = this.initialSelectionValue;
    };

    VomnibarUI.prototype.updateSelection = function() {
      var i, j, ref, results1;
      if (this.completions[0]) {
        if (this.completions[0].autoSelect && !this.previousAutoSelect) {
          this.selection = 0;
        }
        if (this.previousAutoSelect && !this.completions[0].autoSelect) {
          this.selection = -1;
        }
        this.previousAutoSelect = this.completions[0].autoSelect;
      }
      results1 = [];
      for (i = j = 0, ref = this.completionList.children.length; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
        results1.push(this.completionList.children[i].className = (i === this.selection ? "vomnibarSelected" : ""));
      }
      return results1;
    };

    VomnibarUI.prototype.actionFromKeyEvent = function(event) {
      var key;
      key = KeyboardUtils.getKeyChar(event);
      if (KeyboardUtils.isEscape(event)) {
        return "dismiss";
      } else if (key === "up" || (event.shiftKey && event.keyCode === keyCodes.tab) || (event.ctrlKey && (key === "k" || key === "p"))) {
        return "up";
      } else if (key === "down" || (event.keyCode === keyCodes.tab && !event.shiftKey) || (event.ctrlKey && (key === "j" || key === "n"))) {
        return "down";
      } else if (event.keyCode === keyCodes.enter) {
        return "enter";
      }
    };

    VomnibarUI.prototype.onKeydown = function(event) {
      var action, openInNewTab, query;
      action = this.actionFromKeyEvent(event);
      if (!action) {
        return true;
      }
      openInNewTab = this.forceNewTab || (event.shiftKey || event.ctrlKey || KeyboardUtils.isPrimaryModifierKey(event));
      if (action === "dismiss") {
        this.hide();
      } else if (action === "up") {
        this.selection -= 1;
        if (this.selection < this.initialSelectionValue) {
          this.selection = this.completions.length - 1;
        }
        this.updateSelection();
      } else if (action === "down") {
        this.selection += 1;
        if (this.selection === this.completions.length) {
          this.selection = this.initialSelectionValue;
        }
        this.updateSelection();
      } else if (action === "enter") {
        if (this.selection === -1) {
          query = this.input.value.trim();
          if (!(0 < query.length)) {
            return;
          }
          this.hide(function() {
            return chrome.runtime.sendMessage({
              handler: openInNewTab ? "openUrlInNewTab" : "openUrlInCurrentTab",
              url: query
            });
          });
        } else {
          this.update(true, (function(_this) {
            return function() {
              var completion;
              completion = _this.completions[_this.selection];
              return _this.hide(function() {
                return completion.performAction(openInNewTab);
              });
            };
          })(this));
        }
      }
      event.stopImmediatePropagation();
      event.preventDefault();
      return true;
    };

    VomnibarUI.prototype.updateCompletions = function(callback) {
      var query;
      query = this.input.value.trim();
      return this.completer.filter(query, (function(_this) {
        return function(completions) {
          _this.completions = completions;
          _this.populateUiWithCompletions(completions);
          if (callback) {
            return callback();
          }
        };
      })(this));
    };

    VomnibarUI.prototype.populateUiWithCompletions = function(completions) {
      this.completionList.innerHTML = completions.map(function(completion) {
        return "<li>" + completion.html + "</li>";
      }).join("");
      this.completionList.style.display = completions.length > 0 ? "block" : "";
      this.selection = Math.min(Math.max(this.initialSelectionValue, this.selection), this.completions.length - 1);
      return this.updateSelection();
    };

    VomnibarUI.prototype.update = function(updateSynchronously, callback) {
      if (updateSynchronously) {
        if (this.updateTimer !== null) {
          window.clearTimeout(this.updateTimer);
          this.updateTimer = null;
        }
        this.updateCompletions(callback);
      } else if (this.updateTimer !== null) {
        return;
      } else {
        this.updateTimer = setTimeout((function(_this) {
          return function() {
            _this.updateCompletions(callback);
            return _this.updateTimer = null;
          };
        })(this), this.refreshInterval);
      }
      return this.input.focus();
    };

    VomnibarUI.prototype.initDom = function() {
      this.box = document.getElementById("vomnibar");
      this.input = this.box.querySelector("input");
      this.input.addEventListener("input", this.update);
      this.input.addEventListener("keydown", this.onKeydown);
      this.completionList = this.box.querySelector("ul");
      this.completionList.style.display = "";
      window.addEventListener("focus", (function(_this) {
        return function() {
          return _this.input.focus();
        };
      })(this));
      this.box.addEventListener("click", (function(_this) {
        return function(event) {
          _this.input.focus();
          return event.stopImmediatePropagation();
        };
      })(this));
      return document.body.addEventListener("click", (function(_this) {
        return function() {
          return _this.hide();
        };
      })(this));
    };

    return VomnibarUI;

  })();

  BackgroundCompleter = (function() {
    BackgroundCompleter.messageId = 0;

    function BackgroundCompleter(name1) {
      this.name = name1;
      this.filterPort = chrome.runtime.connect({
        name: "filterCompleter"
      });
    }

    BackgroundCompleter.prototype.refresh = function() {
      return chrome.runtime.sendMessage({
        handler: "refreshCompleter",
        name: this.name
      });
    };

    BackgroundCompleter.prototype.filter = function(query, callback) {
      var handler, id;
      id = BackgroundCompleter.messageId += 1;
      this.filterPort.onMessage.addListener(handler = (function(_this) {
        return function(msg) {
          var results;
          if (msg.id === id) {
            _this.filterPort.onMessage.removeListener(handler);
            if (id === BackgroundCompleter.messageId) {
              results = msg.results.map(function(result) {
                var functionToCall;
                functionToCall = result.type === "tab" ? BackgroundCompleter.completionActions.switchToTab.curry(result.tabId) : BackgroundCompleter.completionActions.navigateToUrl.curry(result.url);
                result.performAction = functionToCall;
                return result;
              });
              return callback(results);
            }
          }
        };
      })(this));
      return this.filterPort.postMessage({
        id: id,
        name: this.name,
        query: query
      });
    };

    return BackgroundCompleter;

  })();

  extend(BackgroundCompleter, {
    completionActions: {
      navigateToUrl: function(url, openInNewTab) {
        if (url.startsWith("javascript:")) {
          openInNewTab = false;
        }
        return chrome.runtime.sendMessage({
          handler: openInNewTab ? "openUrlInNewTab" : "openUrlInCurrentTab",
          url: url,
          selected: openInNewTab
        });
      },
      switchToTab: function(tabId) {
        return chrome.runtime.sendMessage({
          handler: "selectSpecificTab",
          id: tabId
        });
      }
    }
  });

  UIComponentServer.registerHandler(function(event) {
    switch (event.data) {
      case "hide":
        return Vomnibar.hide();
      case "hidden":
        return Vomnibar.onHidden();
      default:
        return Vomnibar.activate(event.data);
    }
  });

  root = typeof exports !== "undefined" && exports !== null ? exports : window;

  root.Vomnibar = Vomnibar;

}).call(this);
