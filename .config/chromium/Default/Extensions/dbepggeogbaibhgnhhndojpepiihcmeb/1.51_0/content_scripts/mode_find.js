// Generated by CoffeeScript 1.9.1
(function() {
  var PostFindMode, SuppressPrintable, root,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  SuppressPrintable = (function(superClass) {
    extend(SuppressPrintable, superClass);

    function SuppressPrintable(options) {
      var handler, type;
      SuppressPrintable.__super__.constructor.call(this, options);
      handler = (function(_this) {
        return function(event) {
          if (KeyboardUtils.isPrintable(event)) {
            return _this.suppressEvent;
          } else {
            return _this.continueBubbling;
          }
        };
      })(this);
      type = document.getSelection().type;
      this.unshift({
        _name: "mode-" + this.id + "/suppress-printable",
        keydown: handler,
        keypress: handler,
        keyup: (function(_this) {
          return function(event) {
            if (document.getSelection().type !== type) {
              return _this.exit();
            } else {
              return handler(event);
            }
          };
        })(this)
      });
    }

    return SuppressPrintable;

  })(Mode);

  PostFindMode = (function(superClass) {
    extend(PostFindMode, superClass);

    function PostFindMode() {
      var element;
      if (!(document.activeElement && DomUtils.isEditable(document.activeElement))) {
        return;
      }
      element = document.activeElement;
      PostFindMode.__super__.constructor.call(this, {
        name: "post-find",
        singleton: element,
        exitOnBlur: element,
        exitOnClick: true,
        keydown: function(event) {
          return InsertMode.suppressEvent(event);
        },
        keypress: function(event) {
          return InsertMode.suppressEvent(event);
        },
        keyup: function(event) {
          return InsertMode.suppressEvent(event);
        }
      });
      this.push({
        _name: "mode-" + this.id + "/handle-escape",
        keydown: (function(_this) {
          return function(event) {
            if (KeyboardUtils.isEscape(event)) {
              DomUtils.suppressKeyupAfterEscape(handlerStack);
              _this.exit();
              return _this.suppressEvent;
            } else {
              handlerStack.remove();
              return _this.continueBubbling;
            }
          };
        })(this)
      });
    }

    return PostFindMode;

  })(SuppressPrintable);

  root = typeof exports !== "undefined" && exports !== null ? exports : window;

  root.PostFindMode = PostFindMode;

}).call(this);
