// Generated by CoffeeScript 1.9.1
(function() {
  var CaretMode, CountPrefix, EditMode, Movement, SuppressPrintable, VisualLineMode, VisualMode, backward, character, forward, line, lineboundary, paragraph, root, sentence, vimword, word,
    extend1 = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty,
    slice = [].slice;

  SuppressPrintable = (function(superClass) {
    extend1(SuppressPrintable, superClass);

    function SuppressPrintable(options) {
      var handler;
      if (options == null) {
        options = {};
      }
      handler = (function(_this) {
        return function(event) {
          var ref;
          if (!KeyboardUtils.isPrintable(event)) {
            return _this.stopBubblingAndTrue;
          }
          if (event.type !== "keydown") {
            return _this.suppressEvent;
          }
          if ((ref = event.keyCode) === keyCodes.backspace || ref === keyCodes.deleteKey) {
            return _this.suppressEvent;
          }
          DomUtils.suppressPropagation(event);
          return _this.stopBubblingAndFalse;
        };
      })(this);
      SuppressPrintable.__super__.constructor.call(this, extend(options, {
        keydown: handler,
        keypress: handler,
        keyup: handler
      }));
    }

    return SuppressPrintable;

  })(Mode);

  CountPrefix = (function(superClass) {
    extend1(CountPrefix, superClass);

    function CountPrefix(options) {
      this.countPrefix = "";
      this.countPrefixFactor = options.initialCountPrefix || 1;
      CountPrefix.__super__.constructor.call(this, options);
      this.push({
        _name: this.id + "/count-prefix",
        keypress: (function(_this) {
          return function(event) {
            return _this.alwaysContinueBubbling(function() {
              var keyChar;
              if (!(event.metaKey || event.ctrlKey || event.altKey)) {
                keyChar = String.fromCharCode(event.charCode);
                return _this.countPrefix = keyChar.length === 1 && ("0" <= keyChar && keyChar <= "9") && _this.countPrefix + keyChar !== "0" ? _this.countPrefix + keyChar : "";
              }
            });
          };
        })(this)
      });
    }

    CountPrefix.prototype.getCountPrefix = function() {
      var count;
      count = this.countPrefixFactor * (0 < this.countPrefix.length ? parseInt(this.countPrefix) : 1);
      this.countPrefix = "";
      this.countPrefixFactor = 1;
      return count;
    };

    return CountPrefix;

  })(SuppressPrintable);

  forward = "forward";

  backward = "backward";

  character = "character";

  word = "word";

  line = "line";

  sentence = "sentence";

  paragraph = "paragraph";

  vimword = "vimword";

  lineboundary = "lineboundary";

  Movement = (function(superClass) {
    extend1(Movement, superClass);

    Movement.prototype.opposite = {
      forward: backward,
      backward: forward
    };

    Movement.prototype.paste = function(callback) {
      return chrome.runtime.sendMessage({
        handler: "pasteFromClipboard"
      }, function(response) {
        return callback(response);
      });
    };

    Movement.prototype.copy = function(text, isFinalUserCopy) {
      if (isFinalUserCopy == null) {
        isFinalUserCopy = false;
      }
      chrome.runtime.sendMessage({
        handler: "copyToClipboard",
        data: text
      });
      if (isFinalUserCopy) {
        return this.copy = (function() {});
      }
    };

    Movement.prototype.protectClipboard = (function() {
      var locked;
      locked = false;
      return function(func) {
        if (locked) {
          return func();
        } else {
          locked = true;
          return this.paste((function(_this) {
            return function(text) {
              func();
              _this.copy(text);
              return locked = false;
            };
          })(this));
        }
      };
    })();

    Movement.prototype.changeMode = function(mode, options) {
      if (options == null) {
        options = {};
      }
      this.exit();
      if (this.options.parentMode) {
        return this.options.parentMode.launchSubMode(mode, options);
      } else {
        return new mode(options);
      }
    };

    Movement.prototype.getNextForwardCharacter = function() {
      var afterText, beforeText;
      beforeText = this.selection.toString();
      if (beforeText.length === 0 || this.getDirection() === forward) {
        this.selection.modify("extend", forward, character);
        afterText = this.selection.toString();
        if (beforeText !== afterText) {
          this.selection.modify("extend", backward, character);
          return afterText[afterText.length - 1];
        }
      } else {
        return beforeText[0];
      }
    };

    Movement.prototype.getNextBackwardCharacter = function() {
      var afterText, beforeText;
      beforeText = this.selection.toString();
      if (beforeText.length === 0 || this.getDirection() === backward) {
        this.selection.modify("extend", backward, character);
        afterText = this.selection.toString();
        if (beforeText !== afterText) {
          this.selection.modify("extend", forward, character);
          return afterText[0];
        }
      } else {
        return beforeText[beforeText.length - 1];
      }
    };

    Movement.prototype.nextCharacterIsWordCharacter = (function() {
      var regexp;
      regexp = /[A-Za-z0-9_]/;
      return function() {
        return regexp.test(this.getNextForwardCharacter());
      };
    })();

    Movement.prototype.runMovement = function() {
      var args, direction, granularity, ref;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      ref = typeof args[0] === "string" && args.length === 1 ? args[0].trim().split(/\s+/) : args.length === 1 ? args[0] : args.slice(0, 2), direction = ref[0], granularity = ref[1];
      if (granularity === vimword && direction === forward) {
        while (this.nextCharacterIsWordCharacter()) {
          if (!this.runMovements([forward, character])) {
            return;
          }
        }
        while (this.getNextForwardCharacter() && !this.nextCharacterIsWordCharacter()) {
          if (!this.runMovements([forward, character])) {
            return;
          }
        }
      } else if (granularity === vimword) {
        this.selection.modify(this.alterMethod, backward, word);
      }
      if (granularity === word && direction === forward) {
        while (this.getNextForwardCharacter() && !this.nextCharacterIsWordCharacter()) {
          if (!this.runMovements([forward, character])) {
            return;
          }
        }
        while (this.nextCharacterIsWordCharacter()) {
          if (!this.runMovements([forward, character])) {
            return;
          }
        }
      } else {
        return this.selection.modify(this.alterMethod, direction, granularity);
      }
    };

    Movement.prototype.hashSelection = function(debug) {
      var range, ref;
      range = this.selection.getRangeAt(0);
      return [(ref = this.element) != null ? ref.selectionStart : void 0, this.selection.toString().length, range.anchorOffset, range.focusOffset, this.selection.extentOffset, this.selection.baseOffset].join("/");
    };

    Movement.prototype.selectionChanged = function(func) {
      var before;
      before = this.hashSelection();
      func();
      return this.hashSelection() !== before;
    };

    Movement.prototype.runMovements = function() {
      var i, len, movement, movements;
      movements = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      for (i = 0, len = movements.length; i < len; i++) {
        movement = movements[i];
        if (!this.selectionChanged((function(_this) {
          return function() {
            return _this.runMovement(movement);
          };
        })(this))) {
          return false;
        }
      }
      return true;
    };

    Movement.prototype.reverseSelection = function() {
      var direction, element, i, length, original, range, ref, results, which;
      direction = this.getDirection();
      element = document.activeElement;
      if (element && DomUtils.isEditable(element) && !element.isContentEditable) {
        length = this.selection.toString().length;
        this.collapseSelectionToFocus();
        results = [];
        for (i = 0, ref = length; 0 <= ref ? i < ref : i > ref; 0 <= ref ? i++ : i--) {
          results.push(this.runMovement(this.opposite[direction], character));
        }
        return results;
      } else {
        original = this.selection.getRangeAt(0).cloneRange();
        range = original.cloneRange();
        range.collapse(direction === backward);
        this.setSelectionRange(range);
        which = direction === forward ? "start" : "end";
        return this.selection.extend(original[which + "Container"], original[which + "Offset"]);
      }
    };

    Movement.prototype.extendByOneCharacter = function(direction) {
      var length;
      length = this.selection.toString().length;
      this.selection.modify("extend", direction, character);
      return this.selection.toString().length - length;
    };

    Movement.prototype.getDirection = function() {
      var change, direction, i, len, ref;
      ref = [forward, backward];
      for (i = 0, len = ref.length; i < len; i++) {
        direction = ref[i];
        if (change = this.extendByOneCharacter(direction)) {
          this.extendByOneCharacter(this.opposite[direction]);
          if (0 < change) {
            return direction;
          } else {
            return this.opposite[direction];
          }
        }
      }
      return forward;
    };

    Movement.prototype.collapseSelectionToAnchor = function() {
      if (0 < this.selection.toString().length) {
        return this.selection[this.getDirection() === backward ? "collapseToEnd" : "collapseToStart"]();
      }
    };

    Movement.prototype.collapseSelectionToFocus = function() {
      if (0 < this.selection.toString().length) {
        return this.selection[this.getDirection() === forward ? "collapseToEnd" : "collapseToStart"]();
      }
    };

    Movement.prototype.setSelectionRange = function(range) {
      this.selection.removeAllRanges();
      return this.selection.addRange(range);
    };

    Movement.prototype.movements = {
      "l": "forward character",
      "h": "backward character",
      "j": "forward line",
      "k": "backward line",
      "e": "forward word",
      "b": "backward word",
      "w": "forward vimword",
      ")": "forward sentence",
      "(": "backward sentence",
      "}": "forward paragraph",
      "{": "backward paragraph",
      "0": "backward lineboundary",
      "$": "forward lineboundary",
      "G": "forward documentboundary",
      "gg": "backward documentboundary",
      "Y": function(count) {
        this.selectLine(count);
        return this.yank();
      }
    };

    Movement.prototype.runMovementKeyChar = function() {
      var args;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      return this.protectClipboard((function(_this) {
        return function() {
          return _this.handleMovementKeyChar.apply(_this, args);
        };
      })(this));
    };

    Movement.prototype.handleMovementKeyChar = function(keyChar, count) {
      var i, ref;
      if (count == null) {
        count = 1;
      }
      switch (typeof this.movements[keyChar]) {
        case "string":
          for (i = 0, ref = count; 0 <= ref ? i < ref : i > ref; 0 <= ref ? i++ : i--) {
            this.runMovement(this.movements[keyChar]);
          }
          break;
        case "function":
          this.movements[keyChar].call(this, count);
      }
      return this.scrollIntoView();
    };

    function Movement(options) {
      this.selection = window.getSelection();
      this.movements = extend({}, this.movements);
      this.commands = {};
      this.keyQueue = "";
      Movement.__super__.constructor.call(this, options);
      this.movements.B = this.movements.b;
      this.movements.W = this.movements.w;
      if (this.options.immediateMovement) {
        this.runMovementKeyChar(this.options.immediateMovement, this.getCountPrefix());
        return;
      }
      this.push({
        _name: this.id + "/keypress",
        keypress: (function(_this) {
          return function(event) {
            var command, i, len, ref;
            if (!(event.metaKey || event.ctrlKey || event.altKey)) {
              _this.keyQueue += String.fromCharCode(event.charCode);
              _this.keyQueue = _this.keyQueue.slice(Math.max(0, _this.keyQueue.length - 2));
              ref = [_this.keyQueue, _this.keyQueue.slice(1)];
              for (i = 0, len = ref.length; i < len; i++) {
                command = ref[i];
                if (command && (_this.movements[command] || _this.commands[command])) {
                  _this.selection = window.getSelection();
                  _this.keyQueue = "";
                  if (command === "0" && 0 < _this.countPrefix.length) {
                    return _this.continueBubbling;
                  }
                  if (_this.commands[command]) {
                    _this.commands[command].call(_this, _this.getCountPrefix());
                    _this.scrollIntoView();
                    return _this.suppressEvent;
                  } else if (_this.movements[command]) {
                    _this.runMovementKeyChar(command, _this.getCountPrefix());
                    return _this.suppressEvent;
                  }
                }
              }
            }
            return _this.continueBubbling;
          };
        })(this)
      });
      if (!(this.options.parentMode || options.oneMovementOnly)) {
        (function(_this) {
          return (function() {
            var executeFind;
            executeFind = function(count, findBackwards) {
              var i, initialRange, query, ref;
              if (query = getFindModeQuery(findBackwards)) {
                initialRange = _this.selection.getRangeAt(0).cloneRange();
                for (i = 0, ref = count; 0 <= ref ? i < ref : i > ref; 0 <= ref ? i++ : i--) {
                  if (!window.find(query, Utils.hasUpperCase(query), findBackwards, true, false, true, false)) {
                    _this.setSelectionRange(initialRange);
                    HUD.showForDuration("No matches for '" + query + "'", 1000);
                    return;
                  }
                }
                if (_this.name === "caret" && 0 < _this.selection.toString().length) {
                  return _this.changeMode(VisualMode);
                }
              }
            };
            _this.movements.n = function(count) {
              return executeFind(count, false);
            };
            _this.movements.N = function(count) {
              return executeFind(count, true);
            };
            return _this.movements["/"] = function() {
              this.findMode = window.enterFindMode({
                returnToViewport: true
              });
              return this.findMode.onExit((function(_this) {
                return function() {
                  return _this.changeMode(VisualMode);
                };
              })(this));
            };
          });
        })(this)();
      }
    }

    Movement.prototype.yank = function(args) {
      var message, plural, ref;
      if (args == null) {
        args = {};
      }
      this.yankedText = this.selection.toString();
      if (this.options.deleteFromDocument || args.deleteFromDocument) {
        this.selection.deleteFromDocument();
      }
      if (!this.options.parentMode) {
        this.selection.collapseToStart();
      }
      message = this.yankedText.replace(/\s+/g, " ");
      if (15 < this.yankedText.length) {
        message = message.slice(0, 12) + "...";
      }
      plural = this.yankedText.length === 1 ? "" : "s";
      if ((ref = this.options.onYank) != null) {
        ref.call(this, this.yankedText);
      }
      this.exit();
      HUD.showForDuration("Yanked " + this.yankedText.length + " character" + plural + ": \"" + message + "\".", 2500);
      return this.yankedText;
    };

    Movement.prototype.exit = function(event, target) {
      if (!(this.options.parentMode || this.options.oneMovementOnly)) {
        if ((event != null ? event.type : void 0) === "keydown" && KeyboardUtils.isEscape(event)) {
          this.selection.collapseToStart();
        }
      }
      return Movement.__super__.exit.call(this, event, target);
    };

    Movement.prototype.selectLexicalEntity = function(entity, count) {
      var char, i, j, results, results1;
      if (count == null) {
        count = 1;
      }
      switch (entity) {
        case word:
          if (this.nextCharacterIsWordCharacter()) {
            this.runMovements([forward, character], [backward, word]);
            this.collapseSelectionToFocus();
          }
          return this.runMovements.apply(this, (function() {
            results = [];
            for (var i = 0; 0 <= count ? i < count : i > count; 0 <= count ? i++ : i--){ results.push(i); }
            return results;
          }).apply(this).map(function() {
            return [forward, vimword];
          }));
        case sentence:
          this.runMovements([forward, character], [backward, sentence]);
          this.collapseSelectionToFocus();
          return this.runMovements.apply(this, (function() {
            results1 = [];
            for (var j = 0; 0 <= count ? j < count : j > count; 0 <= count ? j++ : j--){ results1.push(j); }
            return results1;
          }).apply(this).map(function() {
            return [forward, sentence];
          }));
        case paragraph:
          char = this.getNextBackwardCharacter();
          while ((char != null) && char !== "\n") {
            if (!this.runMovements([backward, character], [backward, lineboundary])) {
              return;
            }
            char = this.getNextBackwardCharacter();
          }
          this.collapseSelectionToFocus();
          char = this.getNextForwardCharacter();
          while ((char != null) && char !== "\n") {
            if (!this.runMovements([forward, character], [forward, lineboundary])) {
              return;
            }
            char = this.getNextForwardCharacter();
          }
          return this.runMovement(forward, character);
      }
    };

    Movement.prototype.scrollIntoView = function() {
      return this.protectClipboard((function(_this) {
        return function() {
          var coords, elementWithFocus, position;
          if (_this.element && DomUtils.isEditable(_this.element)) {
            if (_this.element.clientHeight < _this.element.scrollHeight) {
              if (_this.element.isContentEditable) {
                elementWithFocus = DomUtils.getElementWithFocus(_this.selection, _this.getDirection() === backward);
                position = elementWithFocus.getClientRects()[0].bottom - _this.element.getClientRects()[0].top - _this.element.clientHeight + _this.element.scrollTop;
                return Scroller.scrollToPosition(_this.element, position, 0);
              } else {
                position = _this.getDirection() === backward ? _this.element.selectionStart : _this.element.selectionEnd;
                coords = DomUtils.getCaretCoordinates(_this.element, position);
                return Scroller.scrollToPosition(_this.element, coords.top, coords.left);
              }
            }
          } else {
            if (_this.selection.type !== "None") {
              elementWithFocus = DomUtils.getElementWithFocus(_this.selection, _this.getDirection() === backward);
              if (elementWithFocus) {
                return Scroller.scrollIntoView(elementWithFocus);
              }
            }
          }
        };
      })(this));
    };

    return Movement;

  })(CountPrefix);

  VisualMode = (function(superClass) {
    extend1(VisualMode, superClass);

    function VisualMode(options) {
      var defaults, elementWithFocus, ref;
      if (options == null) {
        options = {};
      }
      this.alterMethod = "extend";
      defaults = {
        name: "visual",
        indicator: options.indicator != null ? options.indicator : "Visual mode",
        singleton: VisualMode,
        exitOnEscape: true
      };
      VisualMode.__super__.constructor.call(this, extend(defaults, options));
      if (!(this.options.oneMovementOnly || options.immediateMovement)) {
        if (this.options.parentMode && this.selection.type === "Caret") {
          this.extendByOneCharacter(forward) || this.extendByOneCharacter(backward);
        } else {
          if ((ref = this.selection.type) === "Caret" || ref === "Range") {
            elementWithFocus = DomUtils.getElementWithFocus(this.selection, this.getDirection() === backward);
            if (DomUtils.getVisibleClientRect(elementWithFocus)) {
              if (this.selection.type === "Caret") {
                this.extendByOneCharacter(forward) || this.extendByOneCharacter(backward);
              }
            } else {
              this.selection.removeAllRanges();
            }
          }
          if (this.selection.type !== "Range") {
            this.changeMode(CaretMode);
            HUD.showForDuration("No usable selection, entering caret mode...", 2500);
            return;
          }
        }
      }
      this.push({
        _name: this.id + "/enter/click",
        keypress: (function(_this) {
          return function(event) {
            if (event.keyCode === keyCodes.enter) {
              if (!(event.metaKey || event.ctrlKey || event.altKey || event.shiftKey)) {
                _this.yank();
                return _this.suppressEvent;
              }
            }
            return _this.continueBubbling;
          };
        })(this),
        click: (function(_this) {
          return function(event) {
            return _this.alwaysContinueBubbling(function() {
              if (!_this.options.parentMode) {
                if (DomUtils.isFocusable(event.target)) {
                  return _this.exit(event, event.target);
                }
              }
            });
          };
        })(this)
      });
      if (!this.options.oneMovementOnly) {
        this.commands.y = function() {
          return this.yank();
        };
        this.commands.p = function() {
          return chrome.runtime.sendMessage({
            handler: "openUrlInCurrentTab",
            url: this.yank()
          });
        };
        this.commands.P = function() {
          return chrome.runtime.sendMessage({
            handler: "openUrlInNewTab",
            url: this.yank()
          });
        };
        this.commands.V = function() {
          return this.changeMode(VisualLineMode);
        };
        this.commands.c = function() {
          this.collapseSelectionToFocus();
          return this.changeMode(CaretMode);
        };
        this.commands.o = function() {
          return this.reverseSelection();
        };
        if (this.options.parentMode) {
          this.commands.x = function() {
            return this.yank({
              deleteFromDocument: true
            });
          };
          this.commands.d = function() {
            return this.yank({
              deleteFromDocument: true
            });
          };
          this.commands.c = function() {
            this.yank({
              deleteFromDocument: true
            });
            return this.options.parentMode.enterInsertMode();
          };
        }
      }
      if (this.options.yankLineCharacter) {
        this.commands[this.options.yankLineCharacter] = function(count) {
          this.selectLine(count);
          return this.yank();
        };
      }
      if (this.options.oneMovementOnly) {
        this.commands.a = function(count) {
          var entity, i, len, ref1, results;
          ref1 = [word, sentence, paragraph];
          results = [];
          for (i = 0, len = ref1.length; i < len; i++) {
            entity = ref1[i];
            results.push((function(_this) {
              return function(entity) {
                return _this.commands[entity.charAt(0)] = function() {
                  this.selectLexicalEntity(entity, count);
                  return this.yank();
                };
              };
            })(this)(entity));
          }
          return results;
        };
      }
    }

    VisualMode.prototype.exit = function(event, target) {
      if (!this.options.parentMode) {
        if (document.activeElement && DomUtils.isEditable(document.activeElement)) {
          if ((event != null ? event.type : void 0) !== "click") {
            document.activeElement.blur();
          }
        }
      }
      VisualMode.__super__.exit.call(this, event, target);
      if (this.yankedText != null) {
        if (!this.options.noCopyToClipboard) {
          if (this.debug) {
            console.log("yank:", this.yankedText);
          }
          return this.copy(this.yankedText, true);
        }
      }
    };

    VisualMode.prototype.handleMovementKeyChar = function() {
      var args;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      VisualMode.__super__.handleMovementKeyChar.apply(this, args);
      if (this.options.oneMovementOnly || this.options.immediateMovement) {
        return this.yank();
      }
    };

    VisualMode.prototype.selectLine = function(count) {
      var i, ref;
      if (this.getDirection() === forward) {
        this.reverseSelection();
      }
      this.runMovement(backward, lineboundary);
      this.reverseSelection();
      for (i = 1, ref = count; 1 <= ref ? i < ref : i > ref; 1 <= ref ? i++ : i--) {
        this.runMovement(forward, line);
      }
      this.runMovement(forward, lineboundary);
      if (this.getNextForwardCharacter() === "\n") {
        return this.runMovement(forward, character);
      }
    };

    return VisualMode;

  })(Movement);

  VisualLineMode = (function(superClass) {
    extend1(VisualLineMode, superClass);

    function VisualLineMode(options) {
      if (options == null) {
        options = {};
      }
      VisualLineMode.__super__.constructor.call(this, extend({
        name: "visual/line",
        indicator: "Visual mode (line)"
      }, options));
      this.extendSelection();
      this.commands.v = function() {
        return this.changeMode(VisualMode);
      };
    }

    VisualLineMode.prototype.handleMovementKeyChar = function() {
      var args;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      VisualLineMode.__super__.handleMovementKeyChar.apply(this, args);
      return this.extendSelection();
    };

    VisualLineMode.prototype.extendSelection = function() {
      var direction, i, initialDirection, len, ref, results;
      initialDirection = this.getDirection();
      ref = [initialDirection, this.opposite[initialDirection]];
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        direction = ref[i];
        this.runMovement(direction, lineboundary);
        results.push(this.reverseSelection());
      }
      return results;
    };

    return VisualLineMode;

  })(VisualMode);

  CaretMode = (function(superClass) {
    extend1(CaretMode, superClass);

    function CaretMode(options) {
      var defaults;
      if (options == null) {
        options = {};
      }
      this.alterMethod = "move";
      defaults = {
        name: "caret",
        indicator: "Caret mode",
        singleton: VisualMode,
        exitOnEscape: true
      };
      CaretMode.__super__.constructor.call(this, extend(defaults, options));
      switch (this.selection.type) {
        case "None":
          this.establishInitialSelectionAnchor();
          if (this.selection.type === "None") {
            this.exit();
            HUD.showForDuration("Create a selection before entering visual mode.", 2500);
            return;
          }
          break;
        case "Range":
          this.collapseSelectionToAnchor();
      }
      this.selection.modify("extend", forward, character);
      this.scrollIntoView();
      this.push({
        _name: this.id + "/click",
        click: (function(_this) {
          return function(event) {
            return _this.alwaysContinueBubbling(function() {
              if (DomUtils.isFocusable(event.target)) {
                return _this.exit(event, event.target);
              }
            });
          };
        })(this)
      });
      extend(this.commands, {
        v: function() {
          return this.changeMode(VisualMode);
        },
        V: function() {
          return this.changeMode(VisualLineMode);
        }
      });
    }

    CaretMode.prototype.handleMovementKeyChar = function() {
      var args;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      this.collapseSelectionToAnchor();
      CaretMode.__super__.handleMovementKeyChar.apply(this, args);
      return this.selection.modify("extend", forward, character);
    };

    CaretMode.prototype.establishInitialSelectionAnchor = function() {
      var element, node, nodes, offset, range;
      nodes = document.createTreeWalker(document.body, NodeFilter.SHOW_TEXT);
      while (node = nodes.nextNode()) {
        if (node.nodeType === 3 && 50 <= node.data.trim().length) {
          element = node.parentElement;
          if (DomUtils.getVisibleClientRect(element) && !DomUtils.isEditable(element)) {
            offset = node.data.length - node.data.replace(/^\s+/, "").length;
            range = document.createRange();
            range.setStart(node, offset);
            range.setEnd(node, offset);
            this.setSelectionRange(range);
            return true;
          }
        }
      }
      return false;
    };

    return CaretMode;

  })(Movement);

  EditMode = (function(superClass) {
    extend1(EditMode, superClass);

    function EditMode(options) {
      var defaults;
      if (options == null) {
        options = {};
      }
      this.alterMethod = "move";
      this.element = document.activeElement;
      if (!(this.element && DomUtils.isEditable(this.element))) {
        return;
      }
      options.indicator = "Edit mode";
      defaults = {
        name: "edit",
        exitOnEscape: true,
        exitOnBlur: this.element
      };
      EditMode.__super__.constructor.call(this, extend(defaults, options));
      extend(this.commands, {
        i: function() {
          return this.enterInsertMode();
        },
        a: function() {
          return this.enterInsertMode();
        },
        I: function() {
          this.runMovement(backward, lineboundary);
          return this.enterInsertMode();
        },
        A: function() {
          this.runMovement(forward, lineboundary);
          return this.enterInsertMode();
        },
        o: function() {
          return this.openLine(forward);
        },
        O: function() {
          return this.openLine(backward);
        },
        p: function() {
          return this.pasteClipboard(forward);
        },
        P: function() {
          return this.pasteClipboard(backward);
        },
        v: function() {
          return this.launchSubMode(VisualMode);
        },
        V: function() {
          return this.launchSubMode(VisualLineMode);
        },
        Y: function(count) {
          return this.enterVisualModeForMovement(count, {
            immediateMovement: "Y"
          });
        },
        x: function(count) {
          return this.enterVisualModeForMovement(count, {
            immediateMovement: "l",
            deleteFromDocument: true,
            noCopyToClipboard: true
          });
        },
        X: function(count) {
          return this.enterVisualModeForMovement(count, {
            immediateMovement: "h",
            deleteFromDocument: true,
            noCopyToClipboard: true
          });
        },
        y: function(count) {
          return this.enterVisualModeForMovement(count, {
            yankLineCharacter: "y"
          });
        },
        d: function(count) {
          return this.enterVisualModeForMovement(count, {
            yankLineCharacter: "d",
            deleteFromDocument: true
          });
        },
        c: function(count) {
          return this.enterVisualModeForMovement(count, {
            deleteFromDocument: true,
            onYank: (function(_this) {
              return function() {
                return _this.enterInsertMode();
              };
            })(this)
          });
        },
        D: function(count) {
          return this.enterVisualModeForMovement(1, {
            immediateMovement: "$",
            deleteFromDocument: true
          });
        },
        C: function(count) {
          return this.enterVisualModeForMovement(1, {
            immediateMovement: "$",
            deleteFromDocument: true,
            onYank: (function(_this) {
              return function() {
                return _this.enterInsertMode();
              };
            })(this)
          });
        },
        '~': function(count) {
          return this.swapCase(count, true);
        },
        'g~': function(count) {
          return this.swapCase(count, false);
        },
        r: function(count) {
          return handlerStack.push({
            _name: "repeat-character",
            keydown: (function(_this) {
              return function(event) {
                DomUtils.suppressPropagation(event);
                return _this.stopBubblingAndFalse;
              };
            })(this),
            keypress: (function(_this) {
              return function(event) {
                var i, keyChar, results;
                handlerStack.remove();
                keyChar = String.fromCharCode(event.charCode);
                if (keyChar.length === 1) {
                  _this.enterVisualModeForMovement(count, {
                    immediateMovement: "l",
                    deleteFromDocument: true,
                    noCopyToClipboard: true
                  });
                  DomUtils.simulateTextEntry(_this.element, (function() {
                    results = [];
                    for (var i = 0; 0 <= count ? i < count : i > count; 0 <= count ? i++ : i--){ results.push(i); }
                    return results;
                  }).apply(this).map(function() {
                    return keyChar;
                  }).join(""));
                }
                return _this.suppressEvent;
              };
            })(this)
          });
        }
      });
    }

    EditMode.prototype.swapCase = function(count, immediate) {
      return this.enterVisualModeForMovement(count, {
        immediateMovement: immediate ? "l" : null,
        deleteFromDocument: true,
        noCopyToClipboard: true,
        onYank: (function(_this) {
          return function(text) {
            var char, chars;
            chars = (function() {
              var i, len, ref, results;
              ref = text.split("");
              results = [];
              for (i = 0, len = ref.length; i < len; i++) {
                char = ref[i];
                if (char === char.toLowerCase()) {
                  results.push(char.toUpperCase());
                } else {
                  results.push(char.toLowerCase());
                }
              }
              return results;
            })();
            return DomUtils.simulateTextEntry(_this.element, chars.join(""));
          };
        })(this)
      });
    };

    EditMode.prototype.pasteClipboard = function(direction) {
      return this.paste((function(_this) {
        return function(text) {
          if (text) {
            if (/\n$/.test(text)) {
              _this.runMovement(backward, lineboundary);
              if (direction === forward) {
                _this.runMovement(forward, line);
              }
              DomUtils.simulateTextEntry(_this.element, text);
              return _this.runMovement(backward, line);
            } else {
              return DomUtils.simulateTextEntry(_this.element, text);
            }
          }
        };
      })(this));
    };

    EditMode.prototype.openLine = function(direction) {
      this.runMovement(direction, lineboundary);
      DomUtils.simulateTextEntry(this.element, "\n");
      if (direction === backward) {
        this.runMovement(backward, character);
      }
      return this.enterInsertMode();
    };

    EditMode.prototype.enterVisualModeForMovement = function(count, options) {
      if (options == null) {
        options = {};
      }
      return this.launchSubMode(VisualMode, extend(options, {
        initialCountPrefix: count,
        oneMovementOnly: true
      }));
    };

    EditMode.prototype.enterInsertMode = function() {
      return this.launchSubMode(InsertMode, {
        exitOnEscape: true,
        targetElement: this.options.targetElement
      });
    };

    EditMode.prototype.launchSubMode = function(mode, options) {
      var ref;
      if (options == null) {
        options = {};
      }
      if ((ref = this.activeSubMode) != null) {
        ref.instance.exit();
      }
      this.activeSubMode = {
        mode: mode,
        options: options,
        instance: new mode(extend(options, {
          parentMode: this
        }))
      };
      return this.activeSubMode.instance.onExit((function(_this) {
        return function() {
          return _this.activeSubMode = null;
        };
      })(this));
    };

    EditMode.prototype.exit = function(event, target) {
      var activeSubMode;
      EditMode.__super__.exit.call(this, event, target);
      activeSubMode = this.activeSubMode;
      if (activeSubMode != null) {
        activeSubMode.instance.exit();
      }
      if ((event != null ? event.type : void 0) === "keydown" && KeyboardUtils.isEscape(event)) {
        if ((target != null) && DomUtils.isDOMDescendant(this.element, target)) {
          this.element.blur();
        }
      }
      if ((event != null ? event.type : void 0) === "blur") {
        return (new Mode({
          name: this.id + "-suspended",
          singleton: this.options.singleton
        })).push({
          _name: "suspended-edit/" + this.id + "/focus",
          focus: (function(_this) {
            return function(event) {
              return _this.alwaysContinueBubbling(function() {
                var editMode;
                if ((event != null ? event.target : void 0) === _this.options.targetElement) {
                  editMode = new EditMode(Utils.copyObjectOmittingProperties(_this.options, "keydown", "keypress", "keyup"));
                  if (activeSubMode) {
                    return editMode.launchSubMode(activeSubMode.mode, activeSubMode.options);
                  }
                }
              });
            };
          })(this)
        });
      }
    };

    return EditMode;

  })(Movement);

  root = typeof exports !== "undefined" && exports !== null ? exports : window;

  root.VisualMode = VisualMode;

  root.VisualLineMode = VisualLineMode;

  root.EditMode = EditMode;

}).call(this);
