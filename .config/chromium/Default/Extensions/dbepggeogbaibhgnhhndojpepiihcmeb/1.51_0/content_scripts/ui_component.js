// Generated by CoffeeScript 1.9.1
(function() {
  var UIComponent, root;

  UIComponent = (function() {
    UIComponent.prototype.iframeElement = null;

    UIComponent.prototype.iframePort = null;

    UIComponent.prototype.showing = null;

    UIComponent.prototype.options = null;

    function UIComponent(iframeUrl, className, handleMessage) {
      var ref, shadowDOM, shadowWrapper, styleSheet, xhr;
      this.handleMessage = handleMessage;
      styleSheet = document.createElement("style");
      styleSheet.type = "text/css";
      styleSheet.innerHTML = "* {display: none !important;}";
      xhr = new XMLHttpRequest();
      xhr.onload = function(e) {
        return styleSheet.innerHTML = xhr.responseText;
      };
      xhr.open("GET", chrome.runtime.getURL("content_scripts/vimium.css"), true);
      xhr.send();
      this.iframeElement = document.createElement("iframe");
      extend(this.iframeElement, {
        className: className,
        seamless: "seamless",
        src: chrome.runtime.getURL(iframeUrl)
      });
      this.iframeElement.addEventListener("load", (function(_this) {
        return function() {
          return _this.openPort();
        };
      })(this));
      shadowWrapper = document.createElement("div");
      shadowDOM = (ref = typeof shadowWrapper.createShadowRoot === "function" ? shadowWrapper.createShadowRoot() : void 0) != null ? ref : shadowWrapper;
      shadowDOM.appendChild(styleSheet);
      shadowDOM.appendChild(this.iframeElement);
      document.documentElement.appendChild(shadowWrapper);
      this.showing = true;
      this.hide(false);
      chrome.runtime.onMessage.addListener((function(_this) {
        return function(request) {
          if (_this.showing && request.name === "frameFocused" && request.focusFrameId !== frameId) {
            _this.postMessage("hide");
          }
          return false;
        };
      })(this));
    }

    UIComponent.prototype.openPort = function() {
      var messageChannel;
      messageChannel = new MessageChannel();
      this.iframePort = messageChannel.port1;
      this.iframePort.onmessage = (function(_this) {
        return function(event) {
          return _this.handleMessage(event);
        };
      })(this);
      return chrome.storage.local.get("vimiumSecret", (function(_this) {
        return function(arg) {
          var secret;
          secret = arg.vimiumSecret;
          return _this.iframeElement.contentWindow.postMessage(secret, chrome.runtime.getURL(""), [messageChannel.port2]);
        };
      })(this));
    };

    UIComponent.prototype.postMessage = function(message) {
      var ref;
      return (ref = this.iframePort) != null ? ref.postMessage(message) : void 0;
    };

    UIComponent.prototype.activate = function(options) {
      this.options = options;
      if (this.options != null) {
        this.postMessage(this.options);
      }
      if (!this.showing) {
        this.show();
      }
      return this.iframeElement.focus();
    };

    UIComponent.prototype.show = function(message) {
      if (message != null) {
        this.postMessage(message);
      }
      this.iframeElement.classList.remove("vimiumUIComponentHidden");
      this.iframeElement.classList.add("vimiumUIComponentVisible");
      window.focus();
      window.addEventListener("focus", this.onFocus = (function(_this) {
        return function(event) {
          if (event.target === window) {
            window.removeEventListener("focus", _this.onFocus);
            _this.onFocus = null;
            return _this.postMessage("hide");
          }
        };
      })(this));
      return this.showing = true;
    };

    UIComponent.prototype.hide = function(focusWindow) {
      var ref;
      if (focusWindow == null) {
        focusWindow = true;
      }
      if (focusWindow) {
        this.refocusSourceFrame((ref = this.options) != null ? ref.sourceFrameId : void 0);
      }
      if (this.onFocus) {
        window.removeEventListener("focus", this.onFocus);
      }
      this.onFocus = null;
      this.iframeElement.classList.remove("vimiumUIComponentVisible");
      this.iframeElement.classList.add("vimiumUIComponentHidden");
      this.options = null;
      return this.showing = false;
    };

    UIComponent.prototype.refocusSourceFrame = function(sourceFrameId) {
      var handler, refocusSourceFrame;
      if (this.showing && (sourceFrameId != null) && sourceFrameId !== frameId) {
        refocusSourceFrame = function() {
          return chrome.runtime.sendMessage({
            handler: "sendMessageToFrames",
            message: {
              name: "focusFrame",
              frameId: sourceFrameId,
              highlight: false,
              highlightOnlyIfNotTop: false
            }
          });
        };
        if (windowIsFocused()) {
          return refocusSourceFrame();
        } else {
          return window.addEventListener("focus", handler = function(event) {
            if (event.target === window) {
              window.removeEventListener("focus", handler);
              return refocusSourceFrame();
            }
          });
        }
      }
    };

    return UIComponent;

  })();

  root = typeof exports !== "undefined" && exports !== null ? exports : window;

  root.UIComponent = UIComponent;

}).call(this);
